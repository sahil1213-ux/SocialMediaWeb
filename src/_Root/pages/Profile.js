import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Route, Routes, Link, Outlet, useParams, useLocation, } from "react-router-dom";
import { Button } from "@/components/ui/button";
import LikedPosts from "./LikedPosts";
import { useUserContext } from "@/context";
import { useGetUserById } from "@/react-query/queriesAndMutations";
import { GridPostList, Loader } from "@/components/Shared";
const StatBlock = ({ value, label }) => (_jsxs("div", { className: "flex-center gap-2", children: [_jsx("p", { className: "small-semibold lg:body-bold text-primary-500", children: value }), _jsx("p", { className: "small-medium lg:base-medium text-light-2", children: label })] }));
const Profile = () => {
    const { id } = useParams();
    const { user } = useUserContext();
    const { pathname } = useLocation();
    const { data: currentUser } = useGetUserById(id || "");
    if (!currentUser)
        return (_jsx("div", { className: "flex-center w-full h-full", children: _jsx(Loader, {}) }));
    return (_jsxs("div", { className: "profile-container", children: [_jsx("div", { className: "profile-inner_container", children: _jsxs("div", { className: "flex xl:flex-row flex-col max-xl:items-center flex-1 gap-7", children: [_jsx("img", { src: currentUser.imageUrl || "/assets/icons/profile-placeholder.svg", alt: "profile", className: "w-28 h-28 lg:h-36 lg:w-36 rounded-full" }), _jsxs("div", { className: "flex flex-col flex-1 justify-between md:mt-2", children: [_jsxs("div", { className: "flex flex-col w-full", children: [_jsx("h1", { className: "text-center xl:text-left h3-bold md:h1-semibold w-full", children: currentUser.name }), _jsxs("p", { className: "small-regular md:body-medium text-light-3 text-center xl:text-left", children: ["@", currentUser.username] })] }), _jsxs("div", { className: "flex gap-8 mt-10 items-center justify-center xl:justify-start flex-wrap z-20", children: [_jsx(StatBlock, { value: currentUser.posts.length, label: "Posts" }), _jsx(StatBlock, { value: 20, label: "Followers" }), _jsx(StatBlock, { value: 20, label: "Following" })] }), _jsx("p", { className: "small-medium md:base-medium text-center xl:text-left mt-7 max-w-screen-sm", children: currentUser.bio })] }), _jsxs("div", { className: "flex justify-center gap-4", children: [_jsx("div", { className: `${user.id !== currentUser.$id && "hidden"}`, children: _jsxs(Link, { to: `/update-profile/${currentUser.$id}`, className: `h-12 bg-dark-4 px-5 text-light-1 flex-center gap-2 rounded-lg ${user.id !== currentUser.$id && "hidden"}`, children: [_jsx("img", { src: "/assets/icons/edit.svg", alt: "edit", width: 20, height: 20 }), _jsx("p", { className: "flex whitespace-nowrap small-medium", children: "Edit Profile" })] }) }), _jsx("div", { className: `${user.id === id && "hidden"}`, children: _jsx(Button, { type: "button", className: "shad-button_primary px-8", children: "Follow" }) })] })] }) }), currentUser.$id === user.id && (_jsxs("div", { className: "flex max-w-5xl w-full", children: [_jsxs(Link, { to: `/profile/${id}`, className: `profile-tab rounded-l-lg ${pathname === `/profile/${id}` && "!bg-dark-3"}`, children: [_jsx("img", { src: "/assets/icons/posts.svg", alt: "posts", width: 20, height: 20 }), "Posts"] }), _jsxs(Link, { to: `/profile/${id}/liked-posts`, className: `profile-tab rounded-r-lg ${pathname === `/profile/${id}/liked-posts` && "!bg-dark-3"}`, children: [_jsx("img", { src: "/assets/icons/like.svg", alt: "like", width: 20, height: 20 }), "Liked Posts"] })] })), _jsxs(Routes, { children: [_jsx(Route, { index: true, element: _jsx(GridPostList, { posts: currentUser.posts, showUser: false }) }), currentUser.$id === user.id && (_jsx(Route, { path: "/liked-posts", element: _jsx(LikedPosts, {}) }))] }), _jsx(Outlet, {})] }));
};
export default Profile;
